[{"id":0,"href":"/dev-diaries/docs/gitfichas/","title":"GitFichas Development","section":"Docs","content":"GitFichas #  Hello! If you just arrived here, I welcome you out of the bottom of my heart! Here you\u0026rsquo;ll find the notes and thoughts around my process for developing the GitFichas website.\nThis diary isn\u0026rsquo;t a diary #  A little disclaimer before we start: Even though this page is called \u0026ldquo;diary\u0026rdquo; it will not be updated daily. That is because this project is only worked on my free time, that is, during weekends and holidays.\nIt also worth mentioning that differently from the articles you usually find in my blog that aim to teach someone something most of the time, the goal of this page is to document the development process of GitFichas. Are you going to learn if you read this pages? Probably, yes, but the objective is to show what was done more than teaching, to expose the way I think. Show step-by-step the processes and thinking, even more the anything else document my own learnings.\nI hope though that the info contained here will help you in any way. And that, by following along with this temporal sequence of steps you may know what to do if you ever start your project, and preferably de without making the mistakes I did.\nHow I do I work on GitFichas #  I have a limited time to work on GitFichas, and it is, literally, a side project I do on the weekends. So every new feature you see occur over a few days.\nI try my best to separate the activities I need to make and the adjustments so that they can only need one day of work but bigger changes not always work like that. My goal is always to work on GitFichas on Saturday so I can rest on Sunday and be ready for the working week without feeling exhausted or overwhelmed.\nA little bit of history #  How was GitFichas born #  I\u0026rsquo;m preparing some longer content about Git that I\u0026rsquo;m not ready to share yet, since it is longer it requires more time of me to prepare, review and publish it. Out of this need for more preparation time a \u0026ldquo;itch\u0026rdquo; started to appear.\nThis itch came from the feeling that \u0026ldquo;I\u0026rsquo;m creating this piece of content to help people, but it is not ready yet, and what I\u0026rsquo;ve got so far is just sitting in my computer without helping anybody\u0026rdquo;. So I tried to find a middle ground where I could publish some of the content that is ready and help people squash their doubts about Git.\nSo I started to think about how I could make this happen. Around the same time was trying to learn to draw and to do lettering on the iPad, side note: I have to many hobbies. I also follow Chris Albon and Julia Evans — do follow both of them, they are great references — and about the same time I was thinking about these things I saw one of the Machine Learning Flashcard and another Zine, and a lightbulb went on, maybe I could do something like that only about Git. And then the work began.\nHow each card is made? #  So yes each card is drawn manually. Yes, you read that right, drawn. Let me explain a little better.\nFor each card I follow the same set of steps:\n Choosing a command: I chose which command I want to approach some times based on the questions I make or receive on Twitter, or even yet, I take note of some command I used during the week and that I thought was cool; Content planning: Then I write the draft of the content that goes into the card on my notes app. These drafts contain everything that goes into a card: the title, the command, and the descriptions of each part of the command. I usually write it in Portuguese and then I adapt it into English; Card creation: Only when I have all the information I want to put into a card I draw the card. I use Procreate as my drawing app, I draw the command then I write the notes describing each part of the command then the titles and I export the image in both languages.  Here\u0026rsquo;s what a timelapse of a card being made looks like:\nWith all of that done, we have a card in our hands. To finalize the whole process I create each card blog post and publish it.\n"},{"id":1,"href":"/dev-diaries/docs/gitfichas/escolha-de-um-tema/","title":"Choosing a theme","section":"GitFichas Development","content":"Picking a theme #  This was definitely the easy part of the whole project.\nI didn\u0026rsquo;t want to develop the page myself, and there are a lot of reasons why, but here are the two main reasons, the most impactful ones:\n I wanted to have the content online and as fast as possible; I also wanted to have it be similar to the stack I was already used to.  And here\u0026rsquo;s why.\nGetting the content live, fast #  I believe a lot of blogs from developers never see the light of the day.\nUsually, devs want to make their own blog, with the coolest features, high performance and using the framework of the hour.\nInstead of focusing on the objective of a blog which is, above all, write something and publishing it.\nEven though am a developer at heart, I prefer to see any content I make in the way it helps someone: live so others can take advantage of it. That\u0026rsquo;s also why I like to have things go live fast and improve on it slowly.\nGetting the content live fast has its benefits:\n Early feedback: People tend to be vocal about things that don\u0026rsquo;t work for them or that they think can be improved in some way, these taken with a grain of salt can be really useful; Hypothesis validation: I always thought people would benefit of a friendly content about Git, one that has simple words, and well structured. The way people having been reacting to them as proof of what I imagined.  It is also worth mentioning that these two benefits don\u0026rsquo;t even touch things like creating a portfólio and learning new skills which are also very welcomed.\nGitFichas stack #  I also like to rely on structures that are have a low investment of time to maintain and that\u0026rsquo;s why tend to chose things like GitHub Pages and Jekyll, that allow me to put a page online in a matter of minutes a lot of times even without have to run anything locally. I also used Netlify for the first time.\nI long time ago I wrote a tutorial that teaches step-by-step how to get a website live using Jekyll and Github Pages in case you want to try that for yourself.\nSince I know these two tools, GitHub Pages and Jekyll really well I tend to use it a lot. They have a well established community that use both of them and good docs I can rely on. Last but no least there\u0026rsquo;s also a lot of things ready you can reuse.\nFor example if you access my blog, GitFichas or even Pizza de Dados podcast website, you may be surprised to know that all of them are live using Jekyll and GitHub Pages. Also, all of them use themes that were adapted to implement features that were required.\nIn GitFichas case I needed a theme there were focused on images, so after browsing through library of Jekyll themes, I found this portfolio theme that seemed to be what I needed. In case you want to understand how I pick themes you can checkout this other blog post.\nThe chosen theme has its particularities, but with the choice made, next step was get everything online.\n"},{"id":2,"href":"/dev-diaries/docs/gitfichas/colocando-no-ar/","title":"Getting it online","section":"GitFichas Development","content":"Getting it online #  To the GitFichas online I followed the same steps I usually do for getting pages online. And if you want to know how I do them there\u0026rsquo;s a tutorial that teaches you step-by-step available here. Here I\u0026rsquo;m going to focus on other more philosophical things I don\u0026rsquo;t address on the tutorial.\nThe project is private #  To start, GitFichas is private project, by that I mean, the only person that has access to its source code is me.\nToday, there isn\u0026rsquo;t a particular reason for that, but while I was developing it, my idea was to release one or two cards per week only. And to do that, since I didn\u0026rsquo;t have a CMS attached to the code, I would leave the pull requests ready only to merge them on the date I wanted to publish the cards. This way maintaining the code private would have that surprise factor attached to each card.\nToday the scheduling of cards no longer holds true, but I\u0026rsquo;m still not ready to make it open source.\nI\u0026rsquo;m using Netlify #  A part from the visibility of the project, I also ended up using GitFichas to finally learn how to use Netlify. This service integrates with GitHub in such a beautiful way that its configuration was suuuuper intuitive:\n created my account; associated both by GitHub and Netlify accounts; gave access to Netlify to find only GitFichas' repository (this impressed me, I\u0026rsquo;ll talk about that in a bit); waited the first build to happen (the first one is always the longest), and poof, everything ready.  I thought it was going to be more complex to be honest, and maybe it is, if the site config were more complex or if you were going to use Netlify to do more things than just building the site. Since the site is served through GitHub I didn\u0026rsquo;t need to do anything else.\nAfter that, each new pull request, Netlify\u0026rsquo;s bot appears and displays the following message:\nThis message is update for each new commit that is pushed to GitHub. For me, that sometimes adjust things on the site from an iPad (which I have no development environment), the ability to preview the changes without running it locally is very helpful.\nAccess to one specific repository #  Getting back to the feature that impressed me: access to find only one repository.\nAt work, I use the same GitHub profile that I use for my personal projects. For this reason I tend to be 3 times more aware of what services I give access to my profile data on GitHub.\nThe possibility to control to such specificity which repositories the services can access impressed me because usually you don\u0026rsquo;t have such power.\nFor example, Heroku - another service I use - can list all the repositories in my account, to be fair, Heroku doesn\u0026rsquo;t have access to the organizations I\u0026rsquo;m a part of unless I request it but still, Netlify took that extra step.\nDomain #  To finalize the publishing step I bought a new domain on Namecheap and configured it on GitHub.\nI usually buy and manage my domains through Namecheap, I think it is easy to use and set up. For example, GitFichas actually has two domains:\n https://gitfichas.com that shows the main page in Portuguese; https://gitstudycards.com that redirects to the page in English.  This redirect I make directly on Namecheap nothing further required. It is very practical in my opinion.\nOfficial announcement #  With the site live, and the first cards published I did what I love to do and wrote a blog post to tell everyone that the project was born, and you can find the version of it in English here. Basically it tells what the project is about, like showing what a git study card looks like, and with it, people that follow my work could know what to expect.\n"}]